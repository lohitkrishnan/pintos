#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/vaddr.h"
#include "lib/user/syscall.h"
#include<string.h>
#include "filesys/file.h"
//#include "filesys/file.c"
#include "filesys/filesys.h"
//#include "filesys/inode.c"

#if 0
/* Identifies an inode. */
#define INODE_MAGIC 0x494e4f44

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
  {
    block_sector_t start;               /* First data sector. */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    uint32_t unused[125];               /* Not used. */
  };


struct file
  {
    struct inode *inode;        /* File's inode. */
    off_t pos;                  /* Current position. */
    bool deny_write;            /* Has file_deny_write() been called? */
  };

#endif      
static void syscall_handler (struct intr_frame *);
struct semaphore x;
	void
syscall_init (void) 
{
	intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
	sema_init(&x, 1);
}

bool check_esp(struct intr_frame *f)
{
	return (!(is_user_vaddr((int *)f->esp) && (int *)f->esp != NULL
				&& pagedir_get_page(thread_current()->pagedir, (f->esp)) != NULL));
}

bool check(void *p, char *type)
{

	if(!strcmp(type, "char *"))
		return (!(is_user_vaddr((char *)p) && (char *)p != NULL
					&& pagedir_get_page(thread_current()->pagedir, (p)) != NULL)); 
	else if (!strcmp(type, "int *"))
		return (!(is_user_vaddr((int *)p) && (int *)p != NULL
					&& pagedir_get_page(thread_current()->pagedir, (p)) != NULL));
	else
		printf("\nType is not defined in check() !!\n");
}

int add_file_to_arr(struct file *fp)
{
	int i;
	struct thread *curr = thread_current();
	for (i = 3; i < 128; i++)
	{
		if(curr->fd_arr[i].used == false)
		{
			curr->fd_arr[i].file = fp;	
			curr->fd_arr[i].used = true;
			return i;
		}
	}
	printf("\nIn add_file_to_arr, no space here !!\n");	
}

struct file* get_file(int fd)
{
	struct file *fp = NULL;
	struct thread *curr = thread_current();
	
	 if((fd <= 2) || fd >=128 )
		return NULL;
	if(curr->fd_arr[fd].used == false)
	{
	//printf("\nwill come here\n");
		return NULL;
	}
	else
	{
		curr->fd_arr[fd].used = true;
//		printf("\nFile pos : %d\n", curr->fd_arr[fd].file->pos);
		return curr->fd_arr[fd].file;
	}
}
	
	static void
syscall_handler (struct intr_frame *f UNUSED) 
{

	int fd;
	const void *buf;
	unsigned int size;
	unsigned char c;
	int index;
	int status;
	int tid;
	pid_t pid;
	char *saveptr;
	char *delimiter = " ";
	char *file, *file_name;
	char type[8];
	struct file *s_file;
	void *old_esp = f->esp;
	if(check_esp(f))
		goto error_in_esp;


	int interrupt_number = *(int *)(f->esp);
	(f->esp) += sizeof(int);

	if(check_esp(f))
		goto error_in_esp;

	switch(interrupt_number)
	{
		case SYS_WRITE:

			fd = *(int *)(f->esp);

			(f->esp) += sizeof(int);
			if(check_esp(f)){
				goto error_in_esp;}

			buf = *(int *)(f->esp);

			(f->esp) += sizeof(int);

			if(check_esp(f)){
				goto error_in_esp;}
			if(check(buf, "char *"))
				goto error_in_esp;

			size = *(unsigned int *)(f->esp);
			
			if(fd == 1){
				putbuf(buf, size);
				f->eax = 0;
			}
			else if(fd == 0 || fd == 2 || fd >= 128)
				f->eax = -1;
			else 
			{	
				s_file = get_file(fd);
				if (s_file == NULL)
				{
					f->eax = -1;
				}
				else
				{
				//	printf("\nfile : %x << size to be written : %d\n",s_file,size);
                                  //      printf ("%X\n",buf);
                                    //    printf ("%s\n",buf);
                                      //  file_allow_write (s_file);
					f->eax = file_write(s_file, buf, size);

//	printf("\nfd : %d write done. \t sizeof(buf) : %d \tStatus : %d\n", fd,strlen(buf), f->eax);
				}
			}
			f->esp = old_esp;
			break;
		case SYS_WAIT:
			pid = *(pid_t *)(f->esp);
			//			if (pid == -1 ){
			//				goto error_in_esp;	}
			f->eax = process_wait(pid);

			f->esp = old_esp;
			break;
		case SYS_EXEC:
			file = *(char **)(f->esp);

			if(check(file, "char *"))
				goto error_in_esp;
			//		if(!(is_user_vaddr((char *)file) && (char *)file != NULL
			//					&& pagedir_get_page(thread_current()->pagedir, file) != NULL)){
			//			goto error_in_esp;}

			f->esp = old_esp;
			if((tid = process_execute(file)) == TID_ERROR)
			{
				pid = -1;
			}
			else
			{
				pid = tid;
			}
			f->eax = pid;
			break;
		case SYS_HALT:
			shutdown_power_off();	
			break;
		case SYS_EXIT:
			status = *(int *)(f->esp);
			f->eax = status;
//			if((struct thread *)thread_current()->parent == NULL)
//			{
//				goto error_in_esp;
//			}			
			put_status_in_parent(status);

			struct semaphore *a = &(thread_current()->exit_sema);

			f->esp = old_esp;	
			printf ("%s: exit(%d)\n", strtok_r(thread_name(), delimiter, &saveptr), f->eax);
			sema_up(&(thread_current()->exit_sema));

			thread_exit();	
			break;
		case SYS_CREATE:
			
			sema_down(&x);
			file_name = *(char **)f->esp;
			if(check(file_name, "char *"))
				goto error_in_esp;
			f->esp += sizeof(char *);
			size = *(int *)f->esp;
//                        printf ("Size: %d\n",size);
			f->eax = filesys_create(file_name, size);
			f->esp = old_esp;
			sema_up(&x);
			break;
		case SYS_OPEN:
			sema_down(&x);
			file_name = *(char **)f->esp;
			 if(check(file_name, "char *"))
                                goto error_in_esp;
                        //filesys_create ("junk.t",50);
			s_file = filesys_open(file_name);
//                        printf("File open %s\n",file_name);
			if(s_file == NULL)
			{
				f->eax = -1;
			}
			else
			{
				fd = add_file_to_arr(s_file);
//printf("\nthread :%s ,Opening file :%x , its fd : %d\n",thread_name(),s_file, fd);
				f->eax = fd;	
			}
			f->esp = old_esp;
			sema_up(&x);
			break;
		case SYS_CLOSE:
			sema_down(&x);
			fd = *(int *)f->esp;
			s_file = get_file(fd);
			if(s_file == NULL)
			{	
				printf("\ns_file == NULL\n");
				f->eax = -1;
			}
			else
			{
				printf("\nThread : %s\n",thread_name());
				thread_current()->fd_arr[fd].used = false;
				file_close(s_file);
			}
			f->esp = old_esp;
			sema_up(&x);
			break;
		case SYS_READ:
			sema_down(&x);
			fd = *(int *)f->esp;
//			printf("\nThread :%s, Reading fd = %d\n", thread_name(), fd);
			f->esp += sizeof(int);

			file = *(char **)f->esp;
			if(check(file, "char *"))
				goto error_in_esp;
			f->esp += sizeof(char *);
			size = *(unsigned int *)f->esp;

			if(fd == 0)
			{
				index = 0;
				c = input_getc();
				while(c != '\n')
				{
					file[index++] = c;
					c = input_getc();	
				}
				f->eax = index;
			}
			else
			{
			s_file = get_file(fd);
			if(s_file == NULL)
			{	
//				printf("\nRead will exit with -1\n");	
				f->eax = -1;
			}
			else
					
				f->eax = file_read(s_file, file, size);
//				printf("\nRead exiting with status : %d\n", (int)f->eax);
			}
			f->esp = old_esp;
			sema_up(&x);
			break;
		case SYS_FILESIZE:
			sema_down(&x);
			fd = *(int *)f->esp;
			if((fd >=0 && fd <= 2) || fd >= 128)
				f->eax = -1;
			else
			{
				s_file = get_file(fd);
				if(s_file == NULL)
					f->eax = -1;
				else
				{	
					f->eax = file_length(s_file);
				}
			}
			f->esp =old_esp;
			sema_up(&x);
			break;
		case SYS_SEEK:
			sema_down(&x);
			fd = *(int *)f->esp;
			
			f->esp += sizeof(int);
			if(check_esp(f))
				goto error_in_esp;
			size = *(unsigned int *)f->esp;
			
			s_file = get_file(fd);
			if(s_file == NULL)
			{
				f->eax = -1;
			}
			else
			{
				file_seek(s_file, size);
			}
			sema_up(&x);
			f->esp = old_esp;
			break;
		case SYS_TELL:
			sema_down(&x);
			sema_up(&x);
			f->esp = old_esp;
			break;
		default :
			printf("\n Running Default case in switch case\n");
			break;

	}
	return;
error_in_esp :

	f->eax = -1;
	f->esp = old_esp;

	put_status_in_parent(f->eax);	
	struct semaphore *a = &(thread_current()->exit_sema);

	sema_up(&(thread_current()->exit_sema));
			sema_up(&x);
	printf ("%s: exit(%d)\n", strtok_r(thread_name(), delimiter, &saveptr), f->eax);
	thread_exit();
}
